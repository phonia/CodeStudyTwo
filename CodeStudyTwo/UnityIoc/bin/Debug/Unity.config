<?xml version="1.0" encoding="utf-8" ?>
<configuration>
  <configSections>
    <section name="unity" type="Microsoft.Practices.Unity.Configuration.UnityConfigurationSection, Microsoft.Practices.Unity.Configuration"/>
  </configSections>

  <unity>
    <!--AOP必要节点-->
    <sectionExtension type="Microsoft.Practices.Unity.InterceptionExtension.Configuration.InterceptionConfigurationExtension, Microsoft.Practices.Unity.Interception.Configuration" />
    <aliases>
      <!--<add alias="ILogger" type="Microsoft.Practices.Unity.TestSupport.ILogger, Unity.TestSupport" />
      <add alias="SpecialLogger" type="Microsoft.Practices.Unity.TestSupport.SpecialLogger, Unity.TestSupport" />
      <add alias="ObjectWithTwoProperties" type="Microsoft.Practices.Unity.TestSupport.ObjectWithTwoProperties, Unity.TestSupport" />
      <add alias="SpecialLogger" type="Microsoft.Practices.Unity.TestSupport.SpecialLogger, Unity.TestSupport" />-->
      <add alias="IHouse" type="UnityIoc.AOP.IHouse,UnityIoc"></add><!--类或接口的全名,程序集全名-->
      <add alias="House" type="UnityIoc.AOP.House,UnityIoc"></add>
    </aliases>
    <container>

      <instance type="string" name="CatName" value="I'm a Cat" />
      <instance type="string" name="CowName" value="I'm a Cow" />
      <instance type="string" name="DogName" value="I'm a Dog" />
      <instance type="string" name="feederName" value="peter"></instance>
      
      <!--默认的lifetime-->
      
      <register type="UnityIoc.IAnimal,UnityIoc" mapTo="UnityIoc.Cat,UnityIoc" name="Cat">
        <property name="Name">
          <dependency name="CatName"></dependency>
        </property>
      </register>
      <register type="UnityIoc.IAnimal,UnityIoc" mapTo="UnityIoc.Cow,UnityIoc" name="Cow">
        <property name="Name">
          <dependency name="CowName"></dependency>
        </property>
      </register>
      <register type="UnityIoc.IAnimal,UnityIoc" mapTo="UnityIoc.Dog,UnityIoc" name="Dog">
        <property name="Name">
          <dependency name="DogName"></dependency>
        </property>
      </register>
      
      <register type="UnityIoc.IZoo,UnityIoc" name="Usual" mapTo="UnityIoc.UsualZoo,UnityIoc" >
        <property name="PAnimal">
          <dependency name="Cat"></dependency>
        </property>
        <property name="Animals">
          <array>
            <dependency name="Cat"></dependency>
            <dependency name="Cow"></dependency>
          </array>
        </property>
        <property name="FeederNames">
          <array>
            <dependency name="feederName"></dependency>
            <value value="Not Mentioned!" />
          </array>
        </property>
        <property name="PetNames">
          <array></array>
        </property>
        <constructor>
          <param name="animal" dependencyName="Cow"></param>
        </constructor>
        <method name="AddAnimal">
          <param name="animal" dependencyName="Dog"></param>
        </method>
      </register>
      
      
      <!--lifetime测试-->
      <register type="UnityIoc.IBus,UnityIoc" mapTo="UnityIoc.Bus,UnityIoc" name="9527">
        <!--<lifetime  type="singleton"></lifetime>//有效,但是不建议使用简写-->
        <lifetime type="Microsoft.Practices.Unity.ContainerControlledLifetimeManager,Microsoft.Practices.Unity"></lifetime>
        <property name="Name">
          <value value="9527" />
        </property>
      </register>

      <register type="UnityIoc.IHumanbeings,UnityIoc" mapTo="UnityIoc.Children,UnityIoc" name="Children">
        <property name="Name">
          <value value="children" />
        </property>
        <property name="Bus">
          <dependency name="9527"></dependency>
        </property>
      </register>
      
      <register type="UnityIoc.IHumanbeings,UnityIoc" mapTo="UnityIoc.Man,UnityIoc" name="Man">
        <property name="Name">
          <value value="Man" />
        </property>
        <property name="Bus">
          <dependency name="9527"></dependency>
        </property>
      </register>
      
      <register type="UnityIoc.IHumanbeings,UnityIoc" mapTo="UnityIoc.Women,UnityIoc" name="Women">
        <property name="Name">
          <value value="Women" />
        </property>
        <property name="Bus">
          <dependency name="9527"></dependency>
        </property>
      </register>
      
      <!--Aop测试-->
      <register type="IHouse" mapTo="House" name="houseKeeper">
        <interceptor type="InterfaceInterceptor"/>
        <interceptionBehavior type="UnityIoc.AOP.HouseKeeper,UnityIoc" />
      </register>

      <extension type="Interception" /><!--AOP必要节点-->
      
      <!--policyinjection-->
      <interception>
        <policy name="log">
          <matchingRule name="rule1" type="UnityIoc.AOP.SelfRule,UnityIoc">
          </matchingRule>
          <callHandler name="handler1" type="UnityIoc.AOP.LogHandler,UnityIoc"></callHandler>
        </policy>
      </interception>

      <register type="UnityIoc.AOP.ILogger,UnityIoc" mapTo="UnityIoc.AOP.ConsoleLog,UnityIoc">
        <interceptor type="InterfaceInterceptor"></interceptor>
        <interceptionBehavior type="PolicyInjectionBehavior" />
      </register>
    </container>
  </unity>
</configuration>